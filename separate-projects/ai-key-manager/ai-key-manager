#!/usr/bin/env python3
"""
AI Key Manager - Main CLI Interface

A comprehensive tool for managing AI API keys on macOS with Keychain integration.
"""

import argparse
import sys
import os
from pathlib import Path

# Add the modules directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'modules'))

from key_manager import AIKeyManager
from validators import validate_key_format
from utils import setup_logging, load_config
from config import DEFAULT_CONFIG

__version__ = "1.0.0"


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="AI Key Manager - Secure API key management for macOS",
        epilog="For more information, see the README.md file."
    )
    
    parser.add_argument(
        '--version', 
        action='version', 
        version=f'AI Key Manager {__version__}'
    )
    
    parser.add_argument(
        '--config',
        type=str,
        help='Path to custom configuration file'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='Enable verbose logging'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Import command
    import_parser = subparsers.add_parser('import', help='Import keys from .env file')
    import_parser.add_argument('env_file', help='Path to .env file')
    import_parser.add_argument('--force', action='store_true', help='Overwrite existing keys')
    import_parser.add_argument('--validate', action='store_true', default=True, help='Validate keys before storing')
    
    # List command
    list_parser = subparsers.add_parser('list', help='List all stored keys')
    list_parser.add_argument('--details', action='store_true', help='Show detailed information')
    list_parser.add_argument('--provider', help='Filter by provider')
    
    # Validate command
    validate_parser = subparsers.add_parser('validate', help='Validate all stored keys')
    validate_parser.add_argument('--provider', help='Validate specific provider only')
    validate_parser.add_argument('--fix', action='store_true', help='Attempt to fix validation issues')
    
    # Show command
    show_parser = subparsers.add_parser('show', help='Show details for a specific key')
    show_parser.add_argument('provider', help='Provider name (openai, anthropic, etc.)')
    show_parser.add_argument('--reveal', action='store_true', help='Show the actual key value')
    
    # Remove command
    remove_parser = subparsers.add_parser('remove', help='Remove a stored key')
    remove_parser.add_argument('provider', help='Provider name to remove')
    remove_parser.add_argument('--force', action='store_true', help='Skip confirmation prompt')
    
    # Setup cron command
    cron_parser = subparsers.add_parser('setup-cron', help='Setup periodic validation')
    cron_parser.add_argument('--interval', default='daily', choices=['hourly', 'daily', 'weekly'], help='Validation interval')
    cron_parser.add_argument('--disable', action='store_true', help='Disable cron job')
    
    # Update command
    update_parser = subparsers.add_parser('update', help='Update a specific key')
    update_parser.add_argument('provider', help='Provider name')
    update_parser.add_argument('key', help='New API key value')
    update_parser.add_argument('--validate', action='store_true', default=True, help='Validate key before storing')
    
    # Status command
    status_parser = subparsers.add_parser('status', help='Show system status and statistics')
    
    # Backup command
    backup_parser = subparsers.add_parser('backup', help='Backup key metadata (not the keys themselves)')
    backup_parser.add_argument('output_file', help='Output file for backup')
    
    # Restore command
    restore_parser = subparsers.add_parser('restore', help='Restore key metadata from backup')
    restore_parser.add_argument('backup_file', help='Backup file to restore from')
    
    args = parser.parse_args()
    
    # Setup logging
    logger = setup_logging(verbose=args.verbose)
    
    # Load configuration
    config_path = args.config if args.config else None
    config = load_config(config_path)
    
    # Initialize key manager
    key_manager = AIKeyManager(config=config, logger=logger)
    
    try:
        if args.command == 'import':
            result = key_manager.import_from_env(
                args.env_file, 
                force=args.force, 
                validate=args.validate
            )
            if result:
                print(f"✓ Successfully imported {result} keys")
            else:
                print("✗ Import failed")
                sys.exit(1)
        
        elif args.command == 'list':
            keys = key_manager.list_keys(
                details=args.details,
                provider=args.provider
            )
            if not keys:
                print("No keys found")
            else:
                for key_info in keys:
                    print(key_info)
        
        elif args.command == 'validate':
            results = key_manager.validate_keys(
                provider=args.provider,
                fix_issues=args.fix
            )
            for provider, result in results.items():
                status = "✓" if result['valid'] else "✗"
                print(f"{status} {provider}: {result['message']}")
        
        elif args.command == 'show':
            key_info = key_manager.show_key(
                args.provider,
                reveal_key=args.reveal
            )
            if key_info:
                print(key_info)
            else:
                print(f"Key for {args.provider} not found")
                sys.exit(1)
        
        elif args.command == 'remove':
            if not args.force:
                confirm = input(f"Remove key for {args.provider}? (y/N): ")
                if confirm.lower() != 'y':
                    print("Cancelled")
                    sys.exit(0)
            
            if key_manager.remove_key(args.provider):
                print(f"✓ Removed key for {args.provider}")
            else:
                print(f"✗ Failed to remove key for {args.provider}")
                sys.exit(1)
        
        elif args.command == 'setup-cron':
            if args.disable:
                if key_manager.disable_cron():
                    print("✓ Cron job disabled")
                else:
                    print("✗ Failed to disable cron job")
                    sys.exit(1)
            else:
                if key_manager.setup_cron(args.interval):
                    print(f"✓ Cron job setup for {args.interval} validation")
                else:
                    print("✗ Failed to setup cron job")
                    sys.exit(1)
        
        elif args.command == 'update':
            if key_manager.update_key(
                args.provider, 
                args.key, 
                validate=args.validate
            ):
                print(f"✓ Updated key for {args.provider}")
            else:
                print(f"✗ Failed to update key for {args.provider}")
                sys.exit(1)
        
        elif args.command == 'status':
            status = key_manager.get_status()
            print(status)
        
        elif args.command == 'backup':
            if key_manager.backup_metadata(args.output_file):
                print(f"✓ Backup saved to {args.output_file}")
            else:
                print("✗ Backup failed")
                sys.exit(1)
        
        elif args.command == 'restore':
            if key_manager.restore_metadata(args.backup_file):
                print(f"✓ Metadata restored from {args.backup_file}")
            else:
                print("✗ Restore failed")
                sys.exit(1)
        
        else:
            parser.print_help()
            sys.exit(1)
    
    except KeyboardInterrupt:
        print("\nOperation cancelled by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        print(f"✗ Error: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
